generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////////
// ENUMS            //
///////////////////////

enum EventType {
  MESSAGE_CREATE
  MESSAGE_DELETE
  REACTION_ADD
  REACTION_REMOVE
  MEMBER_JOIN
  MEMBER_LEAVE
  VOICE_JOIN
  VOICE_LEAVE
  GUILD_JOIN
}

enum Plan {
  STARTER
  PRO
  LIFETIME
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
}

///////////////////////
// MODELS           //
///////////////////////

model Guild {
  id        BigInt   @id @map("id") @db.BigInt
  name      String   @map("name")
  ownerId   BigInt   @map("owner_id") @db.BigInt
  createdAt DateTime @default(now()) @map("created_at")

  members      GuildMember[]
  events       RawEvent[]
  metrics      DailyMetric[]
  subscription Subscription?

  @@map("guild")
}

model User {
  id       BigInt  @id @map("id") @db.BigInt
  username String  @map("username")
  avatar   String? @map("avatar")

  memberships GuildMember[]
  events      RawEvent[]

  @@map("user")
}

model GuildMember {
  id       Int       @id @default(autoincrement()) @map("id")
  guildId  BigInt    @map("guild_id") @db.BigInt
  userId   BigInt    @map("user_id") @db.BigInt
  joinedAt DateTime  @default(now()) @map("joined_at")
  leftAt   DateTime? @map("left_at")

  guild Guild @relation(fields: [guildId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([guildId, userId])
  @@map("guild_member")
}

model RawEvent {
  id        BigInt    @id @default(autoincrement()) @map("id") @db.BigInt
  guildId   BigInt    @map("guild_id") @db.BigInt
  userId    BigInt?   @map("user_id") @db.BigInt
  type      EventType @map("type")
  payload   Json      @map("payload")
  createdAt DateTime  @default(now()) @map("created_at")

  guild Guild @relation(fields: [guildId], references: [id])
  user  User? @relation(fields: [userId], references: [id])

  @@index([guildId])
  @@index([createdAt])
  @@map("raw_event")
}

model DailyMetric {
  id          Int      @id @default(autoincrement()) @map("id")
  guildId     BigInt   @map("guild_id") @db.BigInt
  date        DateTime @map("date")
  messages    Int      @map("messages")
  joins       Int      @map("joins")
  leaves      Int      @map("leaves")
  activeUsers Int      @map("active_users")

  guild Guild @relation(fields: [guildId], references: [id])

  @@unique([guildId, date])
  @@index([date])
  @@map("daily_metric")
}

model Subscription {
  id                   String             @id @default(cuid()) @map("id")
  guildId              BigInt             @unique @map("guild_id") @db.BigInt
  stripeSubscriptionId String             @unique @map("stripe_subscription_id")
  plan                 Plan               @map("plan")
  status               SubscriptionStatus @map("status")
  currentPeriodEnd     DateTime?          @map("current_period_end")
  createdAt            DateTime           @default(now()) @map("created_at")

  guild Guild @relation(fields: [guildId], references: [id])

  @@map("subscription")
}
